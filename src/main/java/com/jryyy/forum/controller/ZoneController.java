package com.jryyy.forum.controller;import com.jryyy.forum.constant.Constants;import com.jryyy.forum.constant.GlobalStatus;import com.jryyy.forum.exception.GlobalException;import com.jryyy.forum.models.Response;import com.jryyy.forum.models.request.GetZoneRequest;import com.jryyy.forum.models.request.ZoneRequest;import com.jryyy.forum.services.ZoneService;import com.jryyy.forum.utils.security.UserLoginToken;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpSession;import javax.validation.Valid;@RestController@RequestMapping("/zone")public class ZoneController {    @Autowired    ZoneService zoneService;    @GetMapping    public Response readAllZone(@Valid @ModelAttribute GetZoneRequest getZoneRequest) throws Exception {        return zoneService.findAllZone(getZoneRequest);    }    //zone?info = {}    public Response readAllZone(@Valid String info) throws Exception {        return null;    }    @GetMapping("/{id}")    public Response readZone(@PathVariable("id") int id) throws Exception {        return zoneService.findZoneById(id);    }    @PostMapping    @UserLoginToken    public Response writeUserZone(@Valid @ModelAttribute ZoneRequest request, HttpSession session) throws Exception {        if (request.getMsg() == null && request.getFiles() == null)            throw new GlobalException(GlobalStatus.noContent);        int userId = (int) session.getAttribute(Constants.USER_ID_STRING);        request.setUserId(userId);        return zoneService.writeZone(request);    }    @UserLoginToken    @GetMapping("/self")    public Response readUserZone(@Valid @ModelAttribute GetZoneRequest getZoneRequest, HttpSession session) throws Exception {        int userId = (int) session.getAttribute(Constants.USER_ID_STRING);        return zoneService.findUserZone(getZoneRequest, userId);    }    @UserLoginToken    @DeleteMapping("/{id}")    public Response deleteUserZone(@PathVariable("id") int id, HttpSession session) throws Exception {        int userId = (int) session.getAttribute(Constants.USER_ID_STRING);        return zoneService.deleteZoneById(userId, id);    }    @UserLoginToken    @PutMapping("/like/{id}")    public Response praiseZone(@PathVariable("id") int id, HttpSession session) throws Exception {        int userId = (int) session.getAttribute(Constants.USER_ID_STRING);        return zoneService.likeOrCancel(userId, id);    }    @GetMapping("/like/{id}")    @UserLoginToken    public Response like(@PathVariable("id") int id, HttpSession session) throws Exception {        int userId = (int) session.getAttribute(Constants.USER_ID_STRING);        return zoneService.liked(userId, id);    }}