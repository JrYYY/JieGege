package com.jryyy.forum.controller;import com.jryyy.forum.constant.Constants;import com.jryyy.forum.exception.PreconditionFailedException;import com.jryyy.forum.models.Response;import com.jryyy.forum.models.request.ZoneRequest;import com.jryyy.forum.services.ZoneService;import com.jryyy.forum.utils.security.UserLoginToken;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpSession;@RestController@RequestMapping("/zone")public class ZoneController {    @Autowired    ZoneService zoneService;    @GetMapping("/{curPage}/{pageSize}/{mode}")    public Response readAllZone(@PathVariable("curPage") int curPage, @PathVariable("pageSize") int pageSize,                                @PathVariable("mode") int mode) throws Exception {        return zoneService.findAllZone(curPage, pageSize, mode);    }    @GetMapping("/{id}")    public Response readZone(@PathVariable("id") int id) throws Exception {        return zoneService.findZoneById(id);    }    @PostMapping    @UserLoginToken    public Response writeUserZone(ZoneRequest request, HttpSession session) throws Exception {        if (request.getMsg() == null && request.getFiles() == null)            throw new PreconditionFailedException("请填写上传内容");        int userId = (int) session.getAttribute(Constants.USER_ID_STRING);        request.setUserId(userId);        return zoneService.writeZone(request);    }    @UserLoginToken    @GetMapping("/self/{curPage}/{pageSize}/{mode}")    public Response readUserZone(@PathVariable("curPage") int curPage, @PathVariable("pageSize") int pageSize,                                 @PathVariable("mode") int mode, HttpSession session) throws Exception {        int userId = (int) session.getAttribute(Constants.USER_ID_STRING);        return zoneService.findUserZone(curPage, pageSize, userId, mode);    }    @UserLoginToken    @DeleteMapping("/{id}")    public Response deleteUserZone(@PathVariable("id") int id, HttpSession session) throws Exception {        int userId = (int) session.getAttribute(Constants.USER_ID_STRING);        return zoneService.deleteZoneById(userId, id);    }    @UserLoginToken    @PutMapping("/like/{id}")    public Response praiseZone(@PathVariable("id") int id, HttpSession session) throws Exception {        int userId = (int) session.getAttribute(Constants.USER_ID_STRING);        return zoneService.likeOrCancel(userId, id);    }    @GetMapping("/like/{id}")    @UserLoginToken    public Response like(@PathVariable("id") int id, HttpSession session) throws Exception {        int userId = (int) session.getAttribute(Constants.USER_ID_STRING);        return zoneService.liked(userId, id);    }}